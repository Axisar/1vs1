null_t NULL;

const float GAME_DEATHMATCH		= 1;
const float GAME_TEAM_DEATHMATCH	= 2;
const float GAME_DOMINATION		= 3;
const float GAME_CTF			= 4;
const float GAME_RUNEMATCH		= 5;
const float GAME_CONQUEST		= 6;
const float GAME_KEYHUNT		= 8;
const float GAME_ASSAULT		= 9;
const float GAME_ONSLAUGHT	= 10;
const float GAME_RACE	= 11;
const float GAME_NEXBALL = 12;
const float GAME_CTS = 13;
const float GAME_FREEZETAG = 14;
const float GAME_CLANARENA = 15;
const float GAME_SURVIVE = 16;
const float GAME_SINGLE = 17;

const float RACE_NET_CHECKPOINT_HIT_QUALIFYING = 0; // byte checkpoint, short time, short recordtime, string recordholder
const float RACE_NET_CHECKPOINT_CLEAR = 1;
const float RACE_NET_CHECKPOINT_NEXT_QUALIFYING = 2; // byte nextcheckpoint, short recordtime, string recordholder
const float RACE_NET_CHECKPOINT_HIT_RACE = 3; // byte checkpoint, short delta, byte lapsdelta, string opponent
const float RACE_NET_CHECKPOINT_HIT_RACE_BY_OPPONENT = 4; // byte checkpoint, short delta, byte lapsdelta, string opponent
const float RACE_NET_CHECKPOINT_NEXT_SPEC_QUALIFYING = 5; // byte nextcheckpoint, float laptime, short recordtime, string recordholder
const float RACE_NET_PENALTY_RACE = 6; // byte penaltytime, string reason
const float RACE_NET_PENALTY_QUALIFYING = 7; // byte penaltytime, string reason

///////////////////////////
// key constants

//
// these are the key numbers that should be passed to Key_Event
//
const float K_TAB			=	9;
const float K_ENTER		=	13;
const float K_ESCAPE		=	27;
const float K_SPACE		=	32;

// normal keys should be passed as lowercased ascii

const float K_BACKSPACE	=	127;
const float K_UPARROW		=	128;
const float K_DOWNARROW	=	129;
const float K_LEFTARROW	=	130;
const float K_RIGHTARROW	=	131;

const float K_ALT		=	132;
const float K_CTRL	=	133;
const float K_SHIFT	=	134;
const float K_F1		=	135;
const float K_F2		=	136;
const float K_F3		=	137;
const float K_F4		=	138;
const float K_F5		=	139;
const float K_F6		=	140;
const float K_F7		=	141;
const float K_F8		=	142;
const float K_F9		=	143;
const float K_F10		=	144;
const float K_F11		=	145;
const float K_F12		=	146;
const float K_INS		=	147;
const float K_DEL		=	148;
const float K_PGDN	=	149;
const float K_PGUP	=	150;
const float K_HOME	=	151;
const float K_END		=	152;

const float K_KP_HOME			=	160;
const float K_KP_UPARROW		=	161;
const float K_KP_PGUP			=	162;
const float K_KP_LEFTARROW	=	163;
const float K_KP_5			=	164;
const float K_KP_RIGHTARROW	=	165;
const float K_KP_END			=	166;
const float K_KP_DOWNARROW	=	167;
const float K_KP_PGDN			=	168;
const float K_KP_ENTER		=	169;
const float K_KP_INS   		=	170;
const float K_KP_DEL			=	171;
const float K_KP_SLASH		=	172;
const float K_KP_MINUS		=	173;
const float K_KP_PLUS			=	174;

const float K_PAUSE		=	255;

//
// joystick buttons
//
const float K_JOY1		=	768;
const float K_JOY2		=	769;
const float K_JOY3		=	770;
const float K_JOY4		=	771;

//
// aux keys are for multi-buttoned joysticks to generate so they can use
// the normal binding process
//
const float K_AUX1		=	772;
const float K_AUX2		=	773;
const float K_AUX3		=	774;
const float K_AUX4		=	775;
const float K_AUX5		=	776;
const float K_AUX6		=	777;
const float K_AUX7		=	778;
const float K_AUX8		=	779;
const float K_AUX9		=	780;
const float K_AUX10		=	781;
const float K_AUX11		=	782;
const float K_AUX12		=	783;
const float K_AUX13		=	784;
const float K_AUX14		=	785;
const float K_AUX15		=	786;
const float K_AUX16		=	787;
const float K_AUX17		=	788;
const float K_AUX18		=	789;
const float K_AUX19		=	790;
const float K_AUX20		=	791;
const float K_AUX21		=	792;
const float K_AUX22		=	793;
const float K_AUX23		=	794;
const float K_AUX24		=	795;
const float K_AUX25		=	796;
const float K_AUX26		=	797;
const float K_AUX27		=	798;
const float K_AUX28		=	799;
const float K_AUX29		=	800;
const float K_AUX30		=	801;
const float K_AUX31		=	802;
const float K_AUX32		=	803;

//
// mouse buttons generate virtual keys
//
const float K_MOUSE1		=	512;
const float K_MOUSE2		=	513;
const float K_MOUSE3		=	514;
const float K_MWHEELUP	=	515;
const float K_MWHEELDOWN	=	516;
const float K_MOUSE4		=	517;
const float K_MOUSE5		=	518;
const float K_MOUSE6		=	519;
const float K_MOUSE7		=	520;
const float K_MOUSE8		=	521;
const float K_MOUSE9		=	522;
const float K_MOUSE10		=	523;
const float K_MOUSE11		=	524;
const float K_MOUSE12		=	525;
const float K_MOUSE13		=	526;
const float K_MOUSE14		=	527;
const float K_MOUSE15		=	528;
const float K_MOUSE16		=	529;

///////////////////////////
// keys pressed
const float KEY_FORWARD		=	1;
const float KEY_BACKWARD	=	2;
const float KEY_LEFT		=	4;
const float KEY_RIGHT		=	8;
const float KEY_JUMP		=	16;
const float KEY_CROUCH		=	32;

///////////////////////////
// cvar constants

float CVAR_SAVE 	= 1;
float CVAR_NOTIFY 	= 2;
float CVAR_READONLY	= 4;
// this assignment must match menu/nexuiz/dialog_settings_misc.c!
float	CHAN_AUTO				= 0;
	// on world: announcers, ...                     INFO
	// on players: item pickup                       ITEMS
	// on entities: UNUSED
	// on csqc: UNUSED
float	CHAN_WEAPON				= 1; // Weapon fire
	// on world: UNUSED
	// on players: weapon firing                     WEAPONS
	// on entities: turret firing                    WEAPONS
	// on csqc: UNUSED
float	CHAN_VOICE				= 2; // Voice/Radio
	// on world: UNUSED
	// on players: voice                             VOICE
	// on entities: ambient                          AMBIENT
	// on csqc: UNUSED
float	CHAN_TRIGGER			= 3; // Triggers/Items
	// on world: UNUSED
	// on players: item pickup                       ITEMS
	// on entities: platforms moving etc.            ITEMS
	// on csqc: UNUSED
float	CHAN_PROJECTILE			= 4; // Projectiles
	// on world: UNUSED
	// on players: projectiles hitting player        SHOTS
	// on entities: projectiles                      SHOTS
	// on csqc: projectile sounds                    SHOTS
float	CHAN_WEAPON2			= 5; // Nex fire (separated as it is a very long sound)
	// on world: UNUSED
	// on players: weapon firing                     WEAPONS
	// on entities: turret firing                    WEAPONS
	// on csqc: UNUSED
float	CHAN_PAIN				= 6; // Pain
	// on world: UNUSED
	// on players: pain                              PAIN
	// on entities: projectiles flying               SHOTS
	// on csqc: player pain                          PAIN
float	CHAN_PLAYER				= 7; // Player body
	// on world: UNUSED
	// on players: player sounds                     PLAYER
	// on entities: player sounds                    PLAYER
	// on csqc: UNUSED

float	ATTN_NONE				= 0;
float	ATTN_MIN				= 0.015625;
float	ATTN_NORM				= 0.5;
float	ATTN_IDLE				= 2;
float	ATTN_STATIC				= 3;
float	ATTN_MAX   				= 3.984375;

#define VOL_BASE 0.7
#define VOL_BASEVOICE 1.0

