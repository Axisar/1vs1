float g_balance_minstanex_animtime;
float g_balance_minstanex_refire;
float g_balance_minstanex_explode;
float g_balance_minstanex_explode_damage;
float g_balance_minstanex_explode_edgedamage;
float g_balance_minstanex_explode_force;
float g_balance_minstanex_explode_radius;

.float minstanex_lasthit;

float DrawMinstaNexBeamParticles_effect;
void DrawMinstaNexBeamParticles(vector start, vector end, vector to) {
	NexWhoosh(start, end);
	trailparticles(world, DrawMinstaNexBeamParticles_effect, start, end);
}

void W_MinstaNex_Attack (void)
{
	float flying;
	flying = IsFlying(self); // do this BEFORE to make the trace values from FireRailgunBullet last

	W_SetupShot (self, TRUE, 0, "weapons/minstanexfire.wav", 0);

	yoda = 0;
	damage_goodhits = 0;
	headshot = 0;
	FireRailgunBullet (w_shotorg, w_shotorg + w_shotdir * MAX_SHOT_DISTANCE, 10000, 800, 0, 0, 0, 0, WEP_MINSTANEX);

	if(yoda > 1)
		announce(self, "announcer/male/yoda.wav");

	if(headshot)
		announce(self, "announcer/male/headshot.wav");

	self.minstanex_lasthit = damage_goodhits;
	pointparticles(particleeffectnum("nex_muzzleflash"), w_shotorg, w_shotdir * 1000, 1);

	// teamcolor / hit beam effect
	if(teamplay)
	{
	    switch(self.team)
	    {
            case COLOR_TEAM1:   // Red
                if(damage_goodhits)
                    DrawMinstaNexBeamParticles_effect = particleeffectnum("TE_TEI_G3RED_HIT");
                else
                    DrawMinstaNexBeamParticles_effect = particleeffectnum("TE_TEI_G3RED");
                break;
            case COLOR_TEAM2:   // Blue
                if(damage_goodhits)
                    DrawMinstaNexBeamParticles_effect = particleeffectnum("TE_TEI_G3BLUE_HIT");
                else
                    DrawMinstaNexBeamParticles_effect = particleeffectnum("TE_TEI_G3BLUE");
                break;
            case COLOR_TEAM3:   // Yellow
                if(damage_goodhits)
                    DrawMinstaNexBeamParticles_effect = particleeffectnum("TE_TEI_G3YELLOW_HIT");
                else
                    DrawMinstaNexBeamParticles_effect = particleeffectnum("TE_TEI_G3YELLOW");
                break;
            case COLOR_TEAM4:   // Pink
                if(damage_goodhits)
                    DrawMinstaNexBeamParticles_effect = particleeffectnum("TE_TEI_G3PINK_HIT");
                else
                    DrawMinstaNexBeamParticles_effect = particleeffectnum("TE_TEI_G3PINK");
                break;
	    }
	}
	else
        DrawMinstaNexBeamParticles_effect = particleeffectnum("TE_TEI_G3");

	WarpZone_DrawEffectTriangle(w_shotorg, w_shotorg_visual,  WarpZone_UnTransformOrigin(WarpZone_trace_transform, trace_endpos), DrawMinstaNexBeamParticles);

	// flash and burn the wall
	if (trace_ent.solid == SOLID_BSP && !(trace_dphitq3surfaceflags & Q3SURFACEFLAG_NOIMPACT)) {
		if (g_balance_minstanex_explode) {
			entity e = spawn();
			setorigin(e, trace_endpos);
			RadiusDamage (e, Akimbo_Owner(self), g_balance_minstanex_explode_damage, g_balance_minstanex_explode_edgedamage, g_balance_minstanex_explode_radius, world, g_balance_minstanex_explode_force, WEP_ROCKET_LAUNCHER, world);
			remove(e);
		}
		Damage_DamageInfo(trace_endpos, 10000, 0, 0, 800 * WarpZone_TransformVelocity(WarpZone_trace_transform, w_shotdir), WEP_MINSTANEX, self);
	}

	if not(self.items & IT_UNLIMITED_WEAPON_AMMO)
		self.ammo_cells = self.ammo_cells - 1;
}


float w_minstanex(float req)
{
	if (req == WR_AIM)
	{
		if (self.ammo_cells > 0 || self.items & IT_UNLIMITED_AMMO)
			self.BUTTON_ATCK = bot_aim(1000000, 0, 1, FALSE);
		else
			self.BUTTON_ATCK2 = bot_aim(g_balance_laser_primary_speed, 0, g_balance_laser_primary_lifetime, FALSE);
	}
	else if (req == WR_THINK)
	{
		if (self.BUTTON_ATCK)
		{
			if (weapon_prepareattack(0, g_balance_minstanex_refire))
			{
				W_MinstaNex_Attack();
				weapon_thinkf(WFRAME_FIRE1, g_balance_minstanex_animtime, w_ready);
			}
		}
		else if (self.BUTTON_ATCK2)
		{
			if (self.jump_interval <= time)
			if (PLAYER_REALLY_ALIVE(self))
			{
				self.jump_interval = time + 0.9 * W_WeaponRateFactor();
				W_Laser_Attack(FALSE);
			}
		}
	}
	else if (req == WR_PRECACHE)
	{
		precache_model ("models/nexflash.md3");
		precache_sound ("weapons/minstanexfire.wav");
		precache_sound ("weapons/nexwhoosh1.wav");
		precache_sound ("weapons/nexwhoosh2.wav");
		precache_sound ("weapons/nexwhoosh3.wav");
		w_laser(WR_PRECACHE);
	}
	else if (req == WR_SETUP)
	{
		weapon_setup(WEP_MINSTANEX);
		self.minstanex_lasthit = 0;
	}
	else if (req == WR_CHECKAMMO1)
	{
		return self.ammo_cells >= 1;
	}
	else if (req == WR_CHECKAMMO2)
		return TRUE;
	else if (req == WR_SUICIDEMESSAGE)
		w_deathtypestring = "did the impossible";
	else if (req == WR_KILLMESSAGE)
		w_deathtypestring = "has been vaporized by";
	else if (req == WR_RESETPLAYER)
	{
		self.minstanex_lasthit = 0;
	}
	else if (req == WR_CVAR_CACHE)
	{
		CACHE_CVAR(g_balance_minstanex_animtime);
		CACHE_CVAR(g_balance_minstanex_refire);
		CACHE_CVAR(g_balance_minstanex_explode);
		CACHE_CVAR(g_balance_minstanex_explode_damage);
		CACHE_CVAR(g_balance_minstanex_explode_edgedamage);
		CACHE_CVAR(g_balance_minstanex_explode_force);
		CACHE_CVAR(g_balance_minstanex_explode_radius);
		w_laser(WR_CVAR_CACHE);
	}
	return TRUE;
};
