#define INDEPENDENT_ATTACK_FINISHED

float require_spawnfunc_prefix; // if this float exists, only functions with spawnfunc_ name prefix qualify as spawn functions

#define BUTTON_ATCK   button0
#define BUTTON_JUMP   button2
#define BUTTON_ATCK2  button3
#define BUTTON_ZOOM   button4
#define BUTTON_CROUCH button5
var .float BUTTON_HOOK = button6;
#define BUTTON_INFO   button7
#define BUTTON_CHAT   buttonchat
var .float BUTTON_USE = buttonuse;
#define BUTTON_DRAG   button8

// Globals

float g_norecoil;
float g_jetpack;
float leadlimit;
float g_maxpushtime;

float g_casings;

float sv_foginterval;
float sv_world_scale;

float spawn_debug;
float spawn_debugview;

string map_description;

entity	activator;
string	string_null;
const var void(void)	func_null;
typedef void() voidfunc;

float player_count;
float currentbots;
float bots_would_leave;

.float totalfrags;

float team1_score, team2_score, team3_score, team4_score;

float maxclients;

// Fields

.void(entity inflictor, entity attacker, float damage, float deathtype, vector hitloc, vector force) event_damage;

//.string	wad;
//.string	map;

//.float	worldtype;
.float	delay;
.float	wait;
.float	lip;
//.float	light_lev;
.float	speed;
//.float	style;
//.float	skill;
.float	sounds;

.string killtarget;

.vector	pos1, pos2;
.vector	mangle;

.float cvar_cl_hitsound;

.float	pain_finished;			//Added by Supajoe
.float	pain_frame;			//"
.float	statdraintime;			// record the one-second intervals between draining health and armour when they're over 100
.float  crouch;	// Crouching or not?

.float	strength_finished;
.vector		finaldest, finalangle; 		//plat.qc stuff
.void()		think1;
.float state;
.float		t_length, t_width;

.vector destvec;		// for rain
.float cnt;		// for rain
.float count;
//.float cnt2;

.float play_time;
.float death_time;
.float dead_frame;
.float fade_time;
.float fade_rate;

// player animation state
.float animstate_startframe;
.float animstate_numframes;
.float animstate_framerate;
.float animstate_starttime;
.float animstate_endtime;
.float animstate_override;
.float animstate_looping;

// player animation data for this model
// each vector is as follows:
// _x = startframe
// _y = numframes
// _z = framerate
.vector anim_die1; // player dies
.vector anim_die2; // player dies differently
.vector anim_draw; // player pulls out a weapon
.vector anim_duck; // player crouches (from idle to duckidle)
.vector anim_duckwalk; // player walking while crouching
.vector anim_duckjump; // player jumping from a crouch
.vector anim_duckidle; // player idling while crouching
.vector anim_idle; // player standing
.vector anim_jump; // player jump
.vector anim_pain1; // player flinches from pain
.vector anim_pain2; // player flinches from pain, differently
.vector anim_shoot; // player shoots
.vector anim_taunt; // player taunts others (FIXME: no code references this)
.vector anim_run; // player running forward
.vector anim_runbackwards; // player running backward
.vector anim_strafeleft; // player shuffling left quickly
.vector anim_straferight; // player shuffling right quickly
.vector anim_dead1; // player dead (must be identical to last frame of die1)
.vector anim_dead2; // player dead (must be identical to last frame of die2)
.vector anim_forwardright; // player running forward and right
.vector anim_forwardleft; // player running forward and left
.vector anim_backright; // player running backward and right
.vector anim_backleft; // player running back and left
.vector anim_melee; // player melee attack
.vector anim_melee2; // player secondary melee attack

// weapon animation vectors:
.vector anim_fire1;
.vector anim_fire2;
.vector anim_idle;
.vector anim_reload;

.string mdl;

.string playermodel;
.string playerskin;

.float species;

.float	respawntime;
.float	respawntimejitter;
//.float	chasecam;

.float	damageforcescale;

.float          gravity;

.float		dmg;

.float		air_finished;
.float		dmgtime;

.float		killcount;
.float hitsound, typehitsound;

.float watersound_finished;
.float iscreature;
.vector oldvelocity;

.float pauseregen_finished;
.float pauserothealth_finished;
.float pauserotarmor_finished;
.float pauserotfuel_finished;
string w_deathtypestring;
string w_fragprefix;
float w_deathtype;

void(entity client, string s) centerprint_builtin = #73;
.vector dest1, dest2;

float gameover;
float intermission_running;
float intermission_exittime;
float alreadychangedlevel;

// minstagib vars
.float jump_interval;    // laser refire

//swamp
.float in_swamp;              // bool
.entity swampslug;            // Uses this to release from swamp ("untouch" fix)

// footstep interval
.float nextstep;

.float ready;
float restart_active;
float blockSpectators; //if set, new or existing spectators or observers will be removed unless they become a player within g_maxplayers_spectator_blocktime seconds
.float spectatortime; //point in time since the client is spectating or observing

.float winning;
.float jointime;

#define PREVENT_JOIN_TEXT "^1You may not join the game at this time.\n\nThe player limit reached maximum capacity."

float slowmo;
void() slowmo_update;
float sys_ticrate; // gets initialised in worlspawn, saves the value from cvar("sys_ticrate")
.float spawnshieldtime;

.entity flagcarried;

.float playerid;
float playerid_last;
.float noalign;		// if set to 1, the item or spawnpoint won't be dropped to the floor

.vector spawnorigin;

.vector death_origin;
.vector killer_origin;

.float() customizeentityforclient;
.float cvar_cl_gunalpha;
.float cvar_cl_playerdetailreduction;
.float cvar_scr_centertime;
.string cvar_cl_weaponpriority;
.string cvar_cl_weaponpriorities[10];
#ifdef ALLOW_FORCEMODELS
.float cvar_cl_forceplayermodels;
.float cvar_cl_forceplayermodelsfromnexuiz;
float sv_clforceplayermodels;
#endif
float sv_loddistance1;
float sv_loddistance2;
.float cvar_cl_gunalign;

.float modelindex_lod0;
.float modelindex_lod0_from_nexuiz;
.float skinindex;
.float modelindex_lod1;
.float modelindex_lod2;

string gamemode_name;

typedef .float floatfield;

float weaponsInMap;

.float respawn_countdown; // next number to count

float bot_waypoints_for_items;

.float	attack_finished_for[WEP_COUNT];
.float attack_finished_single;
#ifdef INDEPENDENT_ATTACK_FINISHED
#define ATTACK_FINISHED_FOR(ent,w) ((ent).(attack_finished_for[(w) - WEP_FIRST]))
#else
#define ATTACK_FINISHED_FOR(ent,w) ((ent).attack_finished_single)
#endif
#define ATTACK_FINISHED(ent) ATTACK_FINISHED_FOR(ent,(ent).weapon)

// Q3 support
.float notteam;
.float notsingle;
.float notfree;
.float notq3a;

// database
float ServerProgsDB;
float TemporaryDB;

.float team_saved;

float some_spawn_has_been_used;
float have_team_spawns;

// set when showing a kill countdown
.entity killindicator;
.float killindicator_teamchange;

float lockteams;

.float parm_idlesince;

float next_pingtime;

.float SendFlags;
.float(entity to, float sendflags) SendEntity;

float independent_players;
#define IS_INDEPENDENT_PLAYER(e) ((e).solid == SOLID_TRIGGER)
#define MAKE_INDEPENDENT_PLAYER(e) ((e).solid = SOLID_TRIGGER)
// we're using + here instead of , because fteqcc sucks

string clientstuff;
.float phase;
.float weapons;
.float pressedkeys;

.string fog;

string cvar_changes;

float game_starttime; //point in time when the countdown is over
.float stat_game_starttime;

.float projectiledeathtype;

.string message2;

vector railgun_start, railgun_end; // filled by FireRailgunBullet, used by damage code for head shot

// reset to 0 on weapon switch
// may be useful to all weapons
.float bulletcounter;

.string target2;
.string target3;
.string target4;
.float trigger_reverse;

.void() reset; // if set, an entity is reset using this
.void() reset2; // if set, an entity is reset using this (after calling ALL the reset functions for other entities)

// the QC VM sucks
#define BITXOR(v,b)        ((v) + (b) - 2 * ((v) & (b)))
#define BITXOR_ASSIGN(v,b) ((v) += ((b) - 2 * ((v) & (b))))

.float wasplayer;

.float ammo_fuel;

//flood fields
.float floodcontrol_chat;
.float floodcontrol_chatteam;
.float floodcontrol_chattell;
.float floodcontrol_voice;
.float floodcontrol_voiceteam;

.string noise4;

.float damage_hits, maxdamage_fired;
.float stat_leadlimit;

#ifdef PROFILING
float client_cefc_accumulator;
float client_cefc_accumulatortime;
#endif

.float ammoclip;

#define PROJECTILE_MAKETRIGGER(e) (e).solid = SOLID_CORPSE; (e).dphitcontentsmask = DPCONTENTS_SOLID | DPCONTENTS_BODY | DPCONTENTS_CORPSE
// when doing this, hagar can go through clones
// #define PROJECTILE_MAKETRIGGER(e) (e).solid = SOLID_BBOX

.float spectatee_status;
.float restriction;

.entity clientdata;

.float retard;

.float gameclient;

enum {
	CLIENT_UNKNOWN,
	CLIENT_REXUIZ,
	CLIENT_NEXUIZ,
	CLIENT_OLDNEXUIZ,
	CLIENT_XONOTIC
};

.float keys;

.float lastdamage;

.entity entcs;
.float lastpushtime;
.float saboteur;
.float pushfactor;
.float friction;
string lsmaps_reply2;
.string bgmscript;
.float bgmscriptattack;
.float bgmscriptdecay;
.float bgmscriptsustain;
.float bgmscriptrelease;
.entity body;
.entity realowner;
.float dmg;
.float dmg_edge;
.float dmg_force;
.float dmg_radius;
