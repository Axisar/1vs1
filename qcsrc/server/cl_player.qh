// player sounds, voice messages
// TODO implemented fall and falling
#define ALLPLAYERSOUNDS \
		_VOICEMSG(death) \
		_VOICEMSG(drown) \
		_VOICEMSG(gasp) \
		_VOICEMSG(jump) \
		_VOICEMSG(pain25) \
		_VOICEMSG(pain50) \
		_VOICEMSG(pain75) \
		_VOICEMSG(pain100)
#define ALLVOICEMSGS \
		_VOICEMSG(attack) \
		_VOICEMSG(attackinfive) \
		_VOICEMSG(meet) \
		_VOICEMSG(seenflag) \
		_VOICEMSG(taunt) \
		_VOICEMSG(teamshoot)

#define _VOICEMSG(m) .string playersound_##m;
ALLPLAYERSOUNDS
ALLVOICEMSGS
#undef _VOICEMSG

// reserved sound names for the future (models lack sounds for them):
//		_VOICEMSG(affirmative) \
//		_VOICEMSG(attacking) \
//		_VOICEMSG(defending) \
//		_VOICEMSG(roaming) \
//		_VOICEMSG(onmyway) \
//		_VOICEMSG(droppedflag) \
//		_VOICEMSG(flagcarriertakingdamage) \
//		_VOICEMSG(negative) \
//		_VOICEMSG(seenenemy) \
//		_VOICEMSG(fall) \
//		_VOICEMSG(getflag) \
//		_VOICEMSG(incoming) \
//		_VOICEMSG(coverme) \
//		_VOICEMSG(needhelp) \
//		_VOICEMSG(defend) \
//		_VOICEMSG(freelance) \
//		_VOICEMSG(falling) \
void Player_Init();
void PlayerClear(float killed);
void play_countdown(float finished, string samp);
float Player_CalculateAlpha(entity plr, entity viewer);

void PrecachePlayerSounds(string f);
void UpdatePlayerSounds();
void ClearPlayerSounds();
void VoiceMessage(string type, string message);
void() player_setup_model;
