float g_balance_hlac_primary_ammo;
float g_balance_hlac_primary_animtime;
float g_balance_hlac_primary_damage;
float g_balance_hlac_primary_edgedamage;
float g_balance_hlac_primary_force;
float g_balance_hlac_primary_lifetime;
float g_balance_hlac_primary_radius;
float g_balance_hlac_primary_refire;
float g_balance_hlac_primary_speed;
float g_balance_hlac_primary_spread_add;
float g_balance_hlac_primary_spread_crouchmod;
float g_balance_hlac_primary_spread_max;
float g_balance_hlac_primary_spread_min;
float g_balance_hlac_secondary;
float g_balance_hlac_secondary_ammo;
float g_balance_hlac_secondary_animtime;
float g_balance_hlac_secondary_damage;
float g_balance_hlac_secondary_edgedamage;
float g_balance_hlac_secondary_force;
float g_balance_hlac_secondary_lifetime;
float g_balance_hlac_secondary_radius;
float g_balance_hlac_secondary_refire;
float g_balance_hlac_secondary_shots;
float g_balance_hlac_secondary_speed;
float g_balance_hlac_secondary_spread;
float g_balance_hlac_secondary_spread_crouchmod;

.float HLAC_bulletcounter;
void W_HLAC_Touch (void)
{
	PROJECTILE_TOUCH;

	self.event_damage = SUB_Null;

    RadiusDamage (self, self.owner, g_balance_hlac_primary_damage, g_balance_hlac_primary_edgedamage, g_balance_hlac_primary_radius, world, g_balance_hlac_primary_force, self.projectiledeathtype, other);

	remove (self);
}

void W_HLAC_Touch2 (void)
{
	PROJECTILE_TOUCH;

	self.event_damage = SUB_Null;

    RadiusDamage (self, self.owner, g_balance_hlac_secondary_damage, g_balance_hlac_secondary_edgedamage, g_balance_hlac_secondary_radius, world, g_balance_hlac_secondary_force, self.projectiledeathtype, other);

	remove (self);
}

void W_HLAC_Attack (void)
{
	local entity missile;
    float spread;

    if not(self.items & IT_UNLIMITED_WEAPON_AMMO)
    {
        self.ammo_cells = self.ammo_cells - g_balance_hlac_primary_ammo;
    }

    spread = g_balance_hlac_primary_spread_min + (g_balance_hlac_primary_spread_add * self.HLAC_bulletcounter);
    spread = min(spread,g_balance_hlac_primary_spread_max);
    if(self.crouch)
        spread = spread * g_balance_hlac_primary_spread_crouchmod;

	W_SetupShot (self, FALSE, 3, "weapons/lasergun_fire.wav", g_balance_hlac_primary_damage);
	pointparticles(particleeffectnum("laser_muzzleflash"), w_shotorg, w_shotdir * 1000, 1);
	if (!g_norecoil)
	{
		self.punchangle_x = random () - 0.5;
		self.punchangle_y = random () - 0.5;
	}

	missile = CSQCProjectile(TRUE, PROJECTILE_HLAC, TRUE);
	missile.owner = Akimbo_Owner(self);
	missile.classname = "hlacbolt";
	// missile.dmg = issecondary;
	missile.bot_dodge = TRUE;

    missile.bot_dodgerating = g_balance_hlac_primary_damage;

	missile.movetype = MOVETYPE_FLY;
	PROJECTILE_MAKETRIGGER(missile);

	setorigin (missile, w_shotorg);
	setsize(missile, '0 0 0', '0 0 0');

    missile.velocity = (w_shotdir + randomvec() * spread) * g_balance_hlac_primary_speed;

	W_SetupProjectileVelocity(missile);
	missile.angles = vectoangles (missile.velocity);

	missile.touch = W_HLAC_Touch;
	missile.think = SUB_Remove;

    missile.nextthink = time + g_balance_hlac_primary_lifetime;

	missile.projectiledeathtype = WEP_HLAC;
}

void W_HLAC_Attack2f (void)
{
	local entity missile;
    float spread;

    spread = g_balance_hlac_secondary_spread;


    if(self.crouch)
        spread = spread * g_balance_hlac_secondary_spread_crouchmod;

	W_SetupShot (self, FALSE, 3, "weapons/lasergun_fire.wav", g_balance_hlac_secondary_damage);
	pointparticles(particleeffectnum("laser_muzzleflash"), w_shotorg, w_shotdir * 1000, 1);

	missile = CSQCProjectile(TRUE, PROJECTILE_HLAC, TRUE);
	missile.owner = Akimbo_Owner(self);
	missile.classname = "hlacbolt";
	// missile.dmg = issecondary;
	missile.bot_dodge = TRUE;

    missile.bot_dodgerating = g_balance_hlac_secondary_damage;

	missile.movetype = MOVETYPE_FLY;
	PROJECTILE_MAKETRIGGER(missile);

	setorigin (missile, w_shotorg);
	setsize(missile, '0 0 0', '0 0 0');

    missile.velocity = (w_shotdir + randomvec() * spread) * g_balance_hlac_secondary_speed;

	W_SetupProjectileVelocity(missile);
	missile.angles = vectoangles (missile.velocity);

	missile.touch = W_HLAC_Touch2;
	missile.think = SUB_Remove;

    missile.nextthink = time + g_balance_hlac_secondary_lifetime;

	missile.projectiledeathtype = WEP_HLAC | HITTYPE_SECONDARY;
}

void W_HLAC_Attack2 (void)
{
    float i;

    if not(self.items & IT_UNLIMITED_WEAPON_AMMO)
    {
        self.ammo_cells = self.ammo_cells - g_balance_hlac_secondary_ammo;
    }

    for(i=g_balance_hlac_secondary_shots;i>0;--i)
        W_HLAC_Attack2f();

	if (!g_norecoil)
	{
		self.punchangle_x = random () - 0.5;
		self.punchangle_y = random () - 0.5;
	}
}


// weapon frames
void HLAC_fire1_02()
{
	if(self.weapon != self.switchweapon) // abort immediately if switching
	{
		w_ready();
		return;
	}

	if (self.BUTTON_ATCK)
	{
		if not(self.items & IT_UNLIMITED_WEAPON_AMMO)
		if not(weapon_action(self.weapon, WR_CHECKAMMO1))
		{
			W_SwitchWeapon_Force(self, w_getbestweapon(self));
			w_ready();
			return;
		}

		ATTACK_FINISHED(self) = time + g_balance_hlac_primary_refire * W_WeaponRateFactor();
		W_HLAC_Attack();
		self.HLAC_bulletcounter = self.HLAC_bulletcounter + 1;
        weapon_thinkf(WFRAME_FIRE1, g_balance_hlac_primary_refire, HLAC_fire1_02);
	}
	else
	{
		weapon_thinkf(WFRAME_FIRE1, g_balance_hlac_primary_animtime, w_ready);
	}
};

void spawnfunc_weapon_hlac (void)
{
	weapon_defaultspawnfunc(WEP_HLAC);
}

float w_hlac(float req)
{
	if (req == WR_AIM)
        self.BUTTON_ATCK = bot_aim(g_balance_hlac_primary_speed, 0, g_balance_hlac_primary_lifetime, FALSE);
	else if (req == WR_THINK)
	{
		if (self.BUTTON_ATCK)
		if (weapon_prepareattack(0, g_balance_hlac_primary_refire))
		{
			self.HLAC_bulletcounter = 0;
			W_HLAC_Attack();
			weapon_thinkf(WFRAME_FIRE1, g_balance_hlac_primary_refire, HLAC_fire1_02);
		}

		if (self.BUTTON_ATCK2)
		if (g_balance_hlac_secondary)
		if (weapon_prepareattack(1, g_balance_hlac_secondary_refire))
		{
			W_HLAC_Attack2();
			weapon_thinkf(WFRAME_FIRE2, g_balance_hlac_secondary_animtime, w_ready);
		}

	}
	else if (req == WR_PRECACHE)
	{
		precache_sound ("weapons/lasergun_fire.wav");

	}
	else if (req == WR_SETUP)
		weapon_setup(WEP_HLAC);
	else if (req == WR_CHECKAMMO1)
		return self.ammo_cells >= g_balance_hlac_primary_ammo;
	else if (req == WR_CHECKAMMO2)
		return self.ammo_cells >= g_balance_hlac_secondary_ammo;
	else if (req == WR_SUICIDEMESSAGE)
		w_deathtypestring = "should have used a smaller gun";
	else if (req == WR_KILLMESSAGE)
		w_deathtypestring = "was cut down by";
	else if (req == WR_CVAR_CACHE)
	{
		CACHE_CVAR(g_balance_hlac_primary_ammo);
		CACHE_CVAR(g_balance_hlac_primary_animtime);
		CACHE_CVAR(g_balance_hlac_primary_damage);
		CACHE_CVAR(g_balance_hlac_primary_edgedamage);
		CACHE_CVAR(g_balance_hlac_primary_force);
		CACHE_CVAR(g_balance_hlac_primary_lifetime);
		CACHE_CVAR(g_balance_hlac_primary_radius);
		CACHE_CVAR(g_balance_hlac_primary_refire);
		CACHE_CVAR(g_balance_hlac_primary_speed);
		CACHE_CVAR(g_balance_hlac_primary_spread_add);
		CACHE_CVAR(g_balance_hlac_primary_spread_crouchmod);
		CACHE_CVAR(g_balance_hlac_primary_spread_max);
		CACHE_CVAR(g_balance_hlac_primary_spread_min);
		CACHE_CVAR(g_balance_hlac_secondary);
		CACHE_CVAR(g_balance_hlac_secondary_ammo);
		CACHE_CVAR(g_balance_hlac_secondary_animtime);
		CACHE_CVAR(g_balance_hlac_secondary_damage);
		CACHE_CVAR(g_balance_hlac_secondary_edgedamage);
		CACHE_CVAR(g_balance_hlac_secondary_force);
		CACHE_CVAR(g_balance_hlac_secondary_lifetime);
		CACHE_CVAR(g_balance_hlac_secondary_radius);
		CACHE_CVAR(g_balance_hlac_secondary_refire);
		CACHE_CVAR(g_balance_hlac_secondary_shots);
		CACHE_CVAR(g_balance_hlac_secondary_speed);
		CACHE_CVAR(g_balance_hlac_secondary_spread);
		CACHE_CVAR(g_balance_hlac_secondary_spread_crouchmod);
		CSQCProjectile_Init(PROJECTILE_HLAC);
	}
	return TRUE;
};
